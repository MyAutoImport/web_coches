// api/sitemap.xml.js
export default async function handler(req, res) {
  // Dominio base (SITE_ORIGIN si existe; si no, el host de la request)
  const ORIGIN = (process.env.SITE_ORIGIN || `https://${req.headers.host}`).replace(/\/$/, "");

  // Claves Supabase (usa SERVICE_ROLE si estÃ¡, si no ANON)
  const SUPABASE_URL = process.env.SUPABASE_URL;
  const KEY = process.env.SUPABASE_SERVICE_ROLE || process.env.SUPABASE_ANON_KEY;

  let cars = [];
  try {
    if (!SUPABASE_URL || !KEY) throw new Error("Missing Supabase env");

    // Construimos la query REST
    const qs = new URLSearchParams({
      select: "id,updated_at,created_at,estado_publicacion",
      order: "updated_at.desc.nullsfirst",
      limit: "5000"
    });
    qs.set("estado_publicacion", "in.(publicado,disponible)");

    const r = await fetch(`${SUPABASE_URL}/rest/v1/cars?${qs.toString()}`, {
      headers: {
        apikey: KEY,
        Authorization: `Bearer ${KEY}`,
        Accept: "application/json"
      }
    });

    if (!r.ok) {
      const txt = await r.text().catch(() => "");
      throw new Error(`Supabase ${r.status}: ${txt}`);
    }
    cars = await r.json();
  } catch (e) {
    console.warn("[sitemap] fallback static:", e.message);
    cars = [];
  }

  const iso = (v) => {
    try { return new Date(v).toISOString(); }
    catch { return new Date().toISOString(); }
  };

  // URLs base + fichas
  const now = new Date().toISOString();
  const urls = [
    { loc: `${ORIGIN}/`,            lastmod: now, changefreq: "daily",  priority: "1.0" },
    { loc: `${ORIGIN}/stock.html`,  lastmod: now, changefreq: "daily",  priority: "0.9" },
    ...cars.map(c => ({
      loc: `${ORIGIN}/car.html?id=${encodeURIComponent(c.id)}`,
      lastmod: iso(c.updated_at || c.created_at || Date.now()),
      changefreq: "weekly",
      priority: "0.8"
    }))
  ];

  const xml =
    `<?xml version="1.0" encoding="UTF-8"?>\n` +
    `<urlset xmlns="http://www.sitemaps.org/schemas/sitemap/0.9">\n` +
    urls.map(u =>
      `  <url>` +
      `<loc>${u.loc}</loc>` +
      `<lastmod>${u.lastmod}</lastmod>` +
      `<changefreq>${u.changefreq}</changefreq>` +
      `<priority>${u.priority}</priority>` +
      `</url>`
    ).join("\n") +
    `\n</urlset>`;

  res.setHeader("Content-Type", "application/xml; charset=utf-8");
  // Cache en CDN 1h + SWR 24h
  res.setHeader("Cache-Control", "s-maxage=3600, stale-while-revalidate=86400");
  res.status(200).send(xml);
}
